precision mediump float;

uniform sampler2D iPixelBuffer;
uniform vec2 iResolution;
varying vec2 vTexCoord;

vec2 res = iResolution.xy / 6.0;

float hardScan = -8.0;
float hardPix = -2.0;
vec2 warp = vec2(1.0 / 16.0, 1.0 / 12.0);
float maskDark = 0.5;
float maskLight = 1.5;

vec3 Fetch(vec2 pos, vec2 off) {
  pos = floor(pos * res + off) / res;
  if (max(abs(pos.x - 0.5), abs(pos.y - 0.5)) > 0.5) {
    return vec3(0.0, 0.0, 0.0);
  }
  return texture2D(iPixelBuffer, pos.xy, -16.0).rgb;
}

vec2 Dist(vec2 pos) {
  pos = pos * res; return - ((pos - floor(pos)) - vec2(0.5));
}

float Gaus(float pos, float scale) {
  return exp2(scale * pos * pos);
}

vec3 Horz3(vec2 pos, float off) {
  vec3 b = Fetch(pos, vec2(-1.0, off));
  vec3 c = Fetch(pos, vec2(0.0, off));
  vec3 d = Fetch(pos, vec2(1.0, off));
  float dst = Dist(pos).x;
  float scale = hardPix;
  float wb = Gaus(dst - 1.0, scale);
  float wc = Gaus(dst + 0.0, scale);
  float wd = Gaus(dst + 1.0, scale);
  return (b * wb + c * wc + d * wd) / (wb + wc + wd);
}

vec3 Horz5(vec2 pos, float off) {
  vec3 a = Fetch(pos, vec2(-2.0, off));
  vec3 b = Fetch(pos, vec2(-1.0, off));
  vec3 c = Fetch(pos, vec2(0.0, off));
  vec3 d = Fetch(pos, vec2(1.0, off));
  vec3 e = Fetch(pos, vec2(2.0, off));
  float dst = Dist(pos).x;
  float scale = hardPix;
  float wa = Gaus(dst - 2.0, scale);
  float wb = Gaus(dst - 1.0, scale);
  float wc = Gaus(dst + 0.0, scale);
  float wd = Gaus(dst + 1.0, scale);
  float we = Gaus(dst + 2.0, scale);
  return (a * wa + b * wb + c * wc + d * wd + e * we) / (wa + wb + wc + wd + we);
}

float Scan(vec2 pos, float off) {
  float dst = Dist(pos).y;
  return Gaus(dst + off, hardScan);
}

vec3 Tri(vec2 pos) {
  vec3 a = Horz3(pos, -1.0);
  vec3 b = Horz5(pos, 0.0);
  vec3 c = Horz3(pos, 1.0);
  float wa = Scan(pos, -1.0);
  float wb = Scan(pos, 0.0);
  float wc = Scan(pos, 1.0);
  return a * wa + b * wb + c * wc;
}

vec2 Warp(vec2 pos) {
  pos = pos * 2.0 - 1.0;
  pos *= vec2(1.0 + (pos.y * pos.y) * warp.x, 1.0 + (pos.x * pos.x) * warp.y);
  return pos * 0.5 + 0.5;
}

vec3 Mask(vec2 pos) {
  pos.x += pos.y * 1.5;
  vec3 mask = vec3(maskDark, maskDark, maskDark);
  pos.x = fract(pos.x / 3.0);
  if (pos.x < 1.0 / 3.0) mask.r = maskLight;
  else if (pos.x < 2.0 / 3.0) mask.g = maskLight;
  else mask.b = maskLight;
  return mask;
}

vec3 vignette() {
  vec2 uv = vTexCoord.xy;
  uv *= 1.0 - uv.yx;
  float vig = uv.x * uv.y * 20.0;
  vig = pow(vig, 0.8);
  return vec3(vig);
}

void main() {
  vec2 pos = Warp(vTexCoord);
  gl_FragColor.rgb = Tri(pos).rgb * Mask(vTexCoord.xy * iResolution);
  gl_FragColor.a = 1.0;
  gl_FragColor.rgb *= vignette();
}